#include "solver5.h"

using namespace p3p5;

void Functional::Main(int /*argc*/, char** /*argv*/)
{
    Functional f(0.01, 0.0, 0.01, 0.0001);

    const size_t heating_source_number = f.heating_source_number;
    const size_t meausere_point_number = f.meausere_point_number;

#ifdef OPTIMIZE_Q
    size_t time_size = f._timeDimension.size();

    //double x1[] = {4.281320,4.015598,4.094010,4.487715,5.165369,6.065671,7.126982,8.267653,9.400826,10.436499,11.292881,11.895477,12.192561,12.151197,11.771056,11.084692,10.143746,9.023558,7.806453,6.581709,5.432876,4.435138,3.640652,3.098134,2.827804,2.847890,3.158956,3.758098,4.625613,5.742473,7.057111,8.517783,10.044295,11.545338,12.919116,14.068094,14.898064,15.341176,15.350635,14.920771,14.088449,12.916095,11.497830,9.937732,8.349308,6.838864,5.502558,4.406904,3.615646,3.156957,3.058021,3.326407,3.965251,4.957713,6.285717,7.889860,9.706647,11.634315,13.554807,15.334914,16.845764,17.961839,18.592386,18.672837,18.190862,17.188110,15.739137,13.959683,11.979232,9.940281,7.977120,6.212277,4.730436,3.611580,2.889952,2.594968,2.732480,3.299355,4.270740,5.618373,7.271003,9.151123,11.139858,13.099967,14.877105,16.321468,17.290284,17.683081,17.436737,16.553218,15.101373,13.189094,10.974168,8.622295,6.301977,4.156853,2.300565,0.792480,-0.334286,-1.091902,-1.508038,-1.618225,-1.462646,-1.076040,-0.488491,0.261422,1.132275,2.060794,2.971168,3.773892,4.379822,4.706178,4.705529,4.362403,3.709629,2.826567,1.817596,0.814210,-0.063084,-0.717807,-1.097588,-1.198663,-1.070461,-0.793532,-0.468378,-0.183869,-0.001721,0.056426,0.008469,-0.091928,-0.189081,-0.228202,-0.186857,-0.073392,0.072186,0.192901,0.225130,0.132871,-0.098378,-0.447421,-0.860947,-1.271062,-1.594623,-1.765061,-1.745233,-1.541470,-1.203301,-0.824181,-0.508780,-0.364731,-0.460826,-0.815055,-1.388230,-2.094890,-2.818320,-3.451729,-3.909174,-4.154431,-4.193381,-4.070107,-3.847800,-3.601367,-3.375115,-3.205211,-3.103266,-3.059040,-3.049975,-3.033423,-2.969122,-2.827788,-2.601918,-2.304797,-1.981321,-1.678693,-1.455804,-1.347259,-1.360482,-1.474490,-1.643368,-1.803473,-1.912552,-1.945172,-1.921696,-1.886483,-1.889900,-1.956254,-2.072045,-2.168048,-2.170378,-2.027666,-1.740088,-1.370868,-0.999354,-0.693550,-0.463723,-0.255163,0.014587,0.346803,0.605990,0.482308,-0.258083};
    //double x2[] = {3.158009,3.184737,3.233357,3.302677,3.387367,3.482846,3.581328,3.679663,3.768907,3.845587,3.901365,3.932497,3.937601,3.914573,3.863813,3.788365,3.690446,3.574667,3.450023,3.320842,3.196287,3.080140,2.980047,2.900626,2.846679,2.818525,2.816534,2.839257,2.885022,2.948258,3.023320,3.102096,3.180397,3.248726,3.302995,3.334617,3.339575,3.316043,3.262359,3.179218,3.069188,2.935191,2.781939,2.618157,2.447508,2.278792,2.115349,1.962862,1.826106,1.707721,1.608317,1.527951,1.465341,1.419639,1.388185,1.366480,1.351376,1.341406,1.332127,1.323747,1.312707,1.298839,1.281927,1.264286,1.247407,1.231604,1.219140,1.211147,1.210983,1.216489,1.228873,1.245157,1.262592,1.280468,1.295013,1.302047,1.298945,1.283192,1.254290,1.212668,1.156715,1.088962,1.013840,0.933207,0.854155,0.778812,0.712310,0.657749,0.621251,0.605551,0.609400,0.633992,0.677127,0.738125,0.809102,0.885778,0.959606,1.021730,1.068001,1.090251,1.082005,1.039741,0.961162,0.847738,0.703545,0.529702,0.334411,0.126715,-0.086015,-0.291611,-0.483410,-0.652437,-0.793747,-0.898019,-0.961500,-0.987186,-0.973682,-0.925022,-0.844709,-0.743866,-0.630273,-0.515067,-0.411991,-0.326785,-0.271832,-0.255568,-0.283298,-0.358595,-0.481286,-0.645358,-0.850081,-1.083412,-1.333371,-1.588268,-1.829641,-2.044465,-2.216782,-2.336144,-2.384123,-2.351057,-2.237013,-2.036326,-1.752663,-1.390966,-0.967690,-0.499067,-0.006668,0.481381,0.946955,1.362130,1.700628,1.943587,2.075154,2.087622,1.983687,1.761311,1.437981,1.037585,0.583361,0.113844,-0.344427,-0.757655,-1.102206,-1.344889,-1.468641,-1.477577,-1.367288,-1.150847,-0.842006,-0.476174,-0.080762,0.308629,0.654673,0.939638,1.137432,1.233002,1.224681,1.118357,0.930891,0.691085,0.415098,0.136679,-0.113603,-0.320798,-0.458328,-0.529295,-0.534665,-0.493377,-0.405221,-0.286442,-0.167386,-0.049582,0.058734,0.163545,0.239074,0.263544,0.177669,-0.088068,-0.510898,-0.695372,1.048845};

    //double x1[] = { 6.982833, 4.577156, 3.224840, 2.832113,3.317968,4.563161,6.440510,8.769984,11.338750,13.898802,16.196012,17.973891,19.039924,19.251916,18.565636,17.039717,14.801229,12.056757,9.033209,5.964676,3.052944,0.462788,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.757563,3.870492,7.415416,11.153133,14.771154,17.932641,20.290553,21.591786,21.660065,20.464494,18.125139,14.859536,10.997945,6.886950,2.864585,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.651492,4.791701,9.209678,13.524614,17.316072,20.147186,21.715827,21.827217,20.484657,17.889998,14.366513,10.366032,6.331520,2.653958,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.170150,3.305231,7.085932,11.228951,15.285245,18.725299,20.986488,21.693148,20.645729,17.951486,14.024282,9.458181,5.012131,1.365083,-0.000000,-0.000000,0.578824,2.477937,4.000119,4.680164,4.072860,1.970710,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.449955,2.643053,2.897678,0.961346,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,3.547128,5.296285,3.721917,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,1.730139,3.306135,3.087334,2.536876,1.197331,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.191389,0.010250,0.147556,0.102606 };
    //double x2[] = { 2.648017, 2.505403, 2.385275, 2.286378,2.206906,2.134341,2.065679,1.999303, 1.924437, 1.844439, 1.749854, 1.640449, 1.513638,1.377635,1.236273,1.087955,0.941280,0.800618,0.677136,0.566082,0.474525,0.398638,0.331141,0.277158,0.225669,0.168990,0.101107,0.015165,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.210449,0.649465,1.049184,1.381743,1.629234,1.777462,1.822246,1.776312,1.634469,1.423643,1.175140,0.907776,0.668697,0.475093,0.356439,0.324481,0.412618,0.627599,0.949634,1.376897,1.885948,2.462944,3.054808,3.631668,4.143529,4.538760,4.800168,4.885951,4.769434,4.441963,3.903096,3.175123,2.298490,1.290438,0.214635,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.063525,1.129638,2.174282,3.101880,3.866244,4.369444,4.488198,4.210208,3.591814,2.575161,1.190783,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.261323,2.416994,4.173365,5.597915,6.284769,6.108468,5.025880,3.234277,0.971175,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.061726,1.529046,2.761664,3.857612,3.795101,2.592491,0.368039,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.016863,0.192386,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000};

    //double x1[] = { 15.000000,8.676978,2.331262,0.000000,0.000000,3.233384,8.841404,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,9.121753,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,12.563337,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,9.421677,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,2.176891,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,8.187969,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,6.523210,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,15.000000,13.841368,0.020025,0.000000,0.000000,0.000000,0.000000,2.142488,6.237190,5.691258,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.625075,0.274568,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,7.237067,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,2.530292,5.048751,0.667877,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.152415,0.000000,0.118802,0.000000 };
    //double x2[] = { 2.396969,2.006265,1.730328,1.553456,1.464881,1.406868,1.360702,1.304216,1.187885,1.010146,0.731166,0.341785,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.686722,1.798523,2.502010,2.777543,2.674995,2.174026,1.378214,0.401881,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.495796,2.179061,3.880342,5.490639,6.832261,7.713536,8.080176,7.777234,6.722367,4.891662,2.292949,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.207883,4.115549,6.990979,8.479746,8.346549,6.470233,2.798911,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,3.804051,8.612589,10.680187,9.757835,5.720057,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,5.426701,6.866680,4.003198,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.011673 };

    // T=5
    //double x1[] = { 1.809032,1.721914,1.877215,2.255541,2.830872,3.557360,4.387501,5.261746,6.119124,6.898462,7.545617,8.011608,8.261737,8.271620,8.036029,7.569422,6.897869,6.064038,5.118321,4.121076,3.135114,2.224705,1.444150,0.847079,0.469835,0.340461,0.471855,0.862377,1.494127,2.338627,3.345948,4.462070,5.617572,6.740384,7.756695,8.600217,9.210022,9.543183,9.569269,9.281810,8.699131,7.854425,6.802356,5.607374,4.346231,3.098430,1.945113,0.955026,0.194409,0.000000,0.000000,0.000000,0.159194,0.934916,1.975669,3.220299,4.600977,6.031204,7.421177,8.678738,9.720892,10.471426,10.877200,10.900962,10.535409,9.804135,8.749282,7.440074,5.957461,4.396871,2.856283,1.435026,0.217013,0.000000,0.000000,0.000000,0.000000,0.000000,0.138535,1.391441,2.890897,4.553840,6.274944,7.944742,9.450644,10.690999,11.572811,12.032173,12.025450,11.545990,10.625063,9.316329,7.706535,5.894989,3.996049,2.124110,0.392212,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.150134,1.673983,3.262440,4.811644,6.215443,7.377838,8.210903,8.654788,8.668087,8.242858,7.405521,6.203384,4.715599,3.033749,1.264061,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.876620,2.817093,4.724348,6.467925,7.926354,8.985718,9.566981,9.614043,9.113384,8.095650,6.619263,4.784050,2.706069,0.519316,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,2.265895,4.572174,6.674839,8.424991,9.683613,10.355971,10.376748,9.733704,8.469206,6.659566,4.431736,1.930485,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.210494,3.842502,6.224130,8.178388,9.541356,10.204553,10.098435,9.219912,7.633611,5.445473,2.822326,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.174331,2.281212,4.015442,5.239344,5.862584,5.824002,5.115396,3.782859,1.905496,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.620122,3.180588,4.051080,4.140390,3.426286,1.957738,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.175916,0.968062,0.889370,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.168480,0.407420,0.353648,0.011529,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.298792,0.621154,0.687080,0.678472,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.160651,0.703508,0.463443,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.061765,0.000000,0.425478,0.047672,0.109891,0.108980,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.041609,0.115298,0.000000,0.000000,0.000000,0.095142,0.000918,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000 };
    //double x2[] = { 1.054272,1.059127,1.085589,1.132297,1.195645,1.271711,1.354620,1.439947,1.520700,1.592095,1.647835,1.683715,1.697358,1.686254,1.650090,1.590830,1.510417,1.412844,1.304349,1.190048,1.077384,0.971701,0.879685,0.806418,0.756427,0.732098,0.734554,0.763363,0.816573,0.890129,0.979031,1.076531,1.176855,1.271757,1.355204,1.419911,1.460686,1.474334,1.457913,1.410922,1.335307,1.233446,1.109926,0.971590,0.824369,0.676710,0.535067,0.406675,0.297805,0.213229,0.156389,0.128840,0.130491,0.159485,0.212409,0.283899,0.367915,0.458267,0.546966,0.627870,0.693972,0.739955,0.762029,0.757620,0.726004,0.668374,0.587264,0.486978,0.373816,0.253460,0.133911,0.021746,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.047204,0.157056,0.270168,0.377576,0.472562,0.547355,0.596084,0.614462,0.600034,0.552316,0.472746,0.364877,0.234124,0.088161,0.000112,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.002391,0.009331,0.018501,0.028130,0.109799,0.195787,0.250878,0.269754,0.249906,0.190872,0.094110,0.057354,0.047123,0.035356,0.024047,0.014533,0.007064,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.012446,0.068948,0.122374,0.171297,0.215142,0.248199,0.270650,0.280741,0.281347,0.270627,0.247619,0.214713,0.175312,0.129920,0.083202,0.037385,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.008157,0.046678,0.084023,0.118674,0.148381,0.170119,0.179484,0.176262,0.159799,0.127856,0.083646,0.029172,0.028425,0.028677,0.029311,0.030469,0.031806,0.034123,0.037018,0.040354,0.044098,0.047980,0.051961,0.056509,0.060451,0.064111,0.067967,0.071015,0.074119,0.076685,0.079042,0.080457,0.081883,0.083360,0.084018,0.084049,0.083132,0.081866,0.078919,0.074800,0.068743,0.059790,0.048945,0.035372,0.022479,0.012142,0.001051,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000347,0.009353,0.019515,0.029978,0.038978,0.122822,0.213496,0.295749,0.367280,0.425518,0.469574,0.502773,0.519137,0.523565,0.520982,0.510628,0.503467,0.497539,0.497177,0.502451,0.528075,0.569709,0.622126,0.685785,0.756859,0.848047,0.937994,1.025826,1.102055,1.155517,1.191847,1.201227,1.179318,1.125681,1.039877,0.926289,0.795525,0.641565,0.478332,0.318490,0.164841,0.037894,0.000000,0.000000,0.000000,0.000000,0.000000,0.084075,0.249594,0.445889,0.672248,0.902983,1.133625,1.344162,1.509290,1.631690,1.693302,1.683134,1.597312,1.430356,1.188142,0.888536,0.525032,0.124322,0.000920,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.037641,0.545018,1.024239,1.426619,1.746152,1.940366,1.983338,1.862840,1.570793,1.115943,0.528239,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.035932,0.112435,0.835157,1.353850,1.629924,1.629977,1.335802,0.762610,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.233518,0.655132,0.715668,0.398935,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.119216,0.160713,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000 };

    // T=3 0.114561
    //double x1[] = { 7.451066,0.144655,0.000000,0.000000,0.000000,4.500493,11.229386,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,10.148721,2.009863,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,5.354878,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,5.141441,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.409377,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,7.101104,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.517332,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,12.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,6.295595,10.264398,11.495359,9.899854,5.655380,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,5.427408,9.122624,9.267102,5.710251,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,5.298900,7.193311,2.226720,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.181510,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.732691,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000907,0.029014 };
    //double x2[] = { 0.000000,0.000000,0.000000,0.000000,0.729750,1.607605,2.537964,3.452616,4.266681,4.914243,5.324855,5.446295,5.246104,4.705046,3.829942,2.650151,1.213648,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.032427,2.956524,4.666570,6.055373,7.041679,7.572311,7.617894,7.180154,6.296200,5.021521,3.438679,1.654112,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.315056,0.795527,1.107407,1.244447,1.231443,1.089027,0.858899,0.549767,0.203841,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.088014,0.656046,0.956802,0.918988,0.650008,0.202894,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.790168,2.252108,3.541718,4.426600,4.864694,4.607913,3.535847,1.595249,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.399045,3.983265,4.927374,4.041128,1.269360,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.263407,3.069966,2.960644,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.963261,1.660397,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000 };

    //    DoubleVector x(heating_source_number*time_size);

    //    for (size_t ln=0; ln<time_size; ln++)
    //    {
    //        x[0*time_size+ln] = x1[ln];
    //        x[1*time_size+ln] = x2[ln];
    //    }

    //    for (size_t i=0; i<heating_point_number; i++)
    //    {
    //        for (size_t ln=0; ln<time_size; ln++)
    //        {
    //            x[i*time_size+ln] = 0.0;//0.05*0.001*ln;
    //        }
    //    }

#endif

#ifdef OPTIMIZE_Y
    //srand(time(nullptr));
    for (size_t i=0; i<heating_source_number; i++)
    {
        for (size_t j=0; j<meausere_point_number; j++)
        {
            f.k[i][j] = 0.0;//0.05 - (rand() % 1000) * 0.0001;
            f.z[i][j] = 10.0 + f.k[i][j];
        }
    }
#endif

#ifdef OPTIMIZE_Y
    DoubleVector x(2 * heating_source_number * meausere_point_number);
    for (size_t i=0; i<heating_source_number; i++)
    {
        for (size_t j=0; j<meausere_point_number; j++)
        {
            x[0*heating_source_number*meausere_point_number + i*meausere_point_number + j] = f.k[i][j];
            x[1*heating_source_number*meausere_point_number + i*meausere_point_number + j] = f.z[i][j];
        }
    }

    // T=500
    //const double x1[] = { -0.517938,-0.554214,-0.561210,-0.573928,-0.498175,-0.549009,-0.537552,-0.519455,10.043862,10.003153,10.015863,10.000000,10.031721,9.978533,10.002108,10.013608 };
    //const double x1[] = { -0.495664,-0.572195,-0.519468,-0.586235,-0.504107,-0.530131,-0.570985,-0.501467,10.047378,10.006916,10.019673,10.003897,10.027930,9.974356,9.998018,10.009655 };
    //const double x1[] = { -0.279171,-0.613798,-0.462846,-0.471367,-0.540759,-0.499876,-0.565659,-0.570900,10.044100,10.002614,10.016456,9.999561,10.032629,9.978964,10.003696,10.014012 };
    //const double x1[] = { -0.261460,-0.591819,-0.450201,-0.442891,-0.517557,-0.510802,-0.544676,-0.589113,10.040061,9.994068,10.010016,9.992880,10.039718,9.985547,10.011200,10.021426 };
    //const double x1[] = { -0.218397,-0.570487,-0.347546,-0.405004,-0.464217,-0.514702,-0.539920,-0.608108,10.034023,9.981388,10.000469,9.982918,10.050805,9.995808,10.022939,10.032965 };
    //const double x1[] = { -0.061823,-0.408228,-0.083657,-0.140866,-0.184070,-0.072747,0.056958,-0.070874,10.040246,9.989278,10.017226,10.000269,10.035124,9.977792,10.001686,10.015058 };
    //const double x1[] = { -0.123125,-0.485238,-0.186630,-0.150516,-0.220890,-0.016917,0.051749,-0.017874,10.058294,10.060698,10.032328,10.019139,10.029638,9.975233,10.003558,10.012117 };
    //const double x1[] = { -0.098624,-0.522315,-0.144864,-0.109226,-0.249009,-0.031725,0.110425,0.081891,10.089100,10.169224,10.078014,10.051277,10.072794,9.980609,9.992992,10.017170 };
    //const double x1[] = { -0.142684,-0.477681,-0.148600,-0.086369,-0.229681,0.140437,0.279019,0.173836,10.156707,10.437467,10.168664,10.123407,10.152389,9.971530,9.957007,9.991577 };

    // T=600
    const double x1[] = { -0.139751,-0.474833,-0.150734,-0.085685,-0.230342,0.140775,0.279316,0.173955,10.149486,10.412895,10.160875,10.119001,10.151724,9.971919,9.957810,9.992079 };

    for (size_t i=0; i<2*heating_source_number * meausere_point_number; i++) { x[i] = x1[i]; }


#endif

#ifdef OPTIMIZE_Q
    IPrinter::printVector(x.mid(   0, 1000));
    IPrinter::printVector(x.mid(1001, 2001));
    IPrinter::printVector(f.pv.mid(   0, 1000));
    IPrinter::printVector(f.pv.mid(1001, 2001));

    DoubleVector g1(x.length());
    DoubleVector g2(x.length(), 0.0);

    f.gradient(x, g1);
    IPrinter::printVector(g1.mid(   0, 1000).L2Normalize());
    IPrinter::printVector(g1.mid(1001, 2001).L2Normalize());
    IPrinter::printSeperatorLine();

    std::vector<size_t> i1 = {   0,  100,  200,  300,  400,  500,  600,  700,  800,  900, 1000};
    std::vector<size_t> i2 = {1001, 1101, 1201, 1301, 1401, 1501, 1601, 1701, 1801, 1901, 2001};
    IGradient::Gradient(__NUM_GRAD_STEP__, &f, x, g2, i1); g2[   0] *= 2; g2[1000] *= 2;
    IPrinter::printVector(g2.mid(   0, 1000).L2Normalize());
    IGradient::Gradient(__NUM_GRAD_STEP__, &f, x, g2, i2); g2[1001] *= 2; g2[2001] *= 2;
    IPrinter::printVector(g2.mid(1001, 2001).L2Normalize());
#endif

#if defined(OPTIMIZE_Y) && defined(CALCULATE_GRAD)
    IPrinter::printVector(x.mid(0, 7), "k:\t", 8);
    IPrinter::printVector(x.mid(8, 15), "z:\t", 8);
    //IPrinter::printVector(f.pi_v.mid(   0, 1000));
    //IPrinter::printVector(f.pi_v.mid(1001, 2001));
    IPrinter::printSeperatorLine();

    DoubleVector g1(x.length(), 0.0);
    DoubleVector g2(x.length(), 0.0);

    f.gradient(x, g1);
    IPrinter::printVector(g1.mid(0,  7).L2Normalize(), "k:\t", 8);
    IPrinter::printVector(g1.mid(8, 15).L2Normalize(), "z:\t", 8);
    IPrinter::printSeperatorLine();

    IGradient::Gradient(&f, 0.01, x, g2, 0, 7);
    IPrinter::printVector(g2.mid(0, 7).L2Normalize(), "k:\t", 8);
    IGradient::Gradient(&f, 0.01, x, g2, 8, 15);
    IPrinter::printVector(g2.mid(8, 15).L2Normalize(), "z:\t", 8);
    IPrinter::printSeperatorLine();
#endif


    //f.gm = new ConjugateGradient;       f.gm->setNormalize(false);
    f.gm = new SteepestDescentGradient; f.gm->setNormalize(true);
    f.gm->setFunction(&f);
    f.gm->setGradient(&f);
    f.gm->setPrinter(&f);
    f.gm->setProjection(&f);
    f.gm->setOptimalityTolerance(0.0);
    f.gm->setStepTolerance(0.0);
    f.gm->setFunctionTolerance(0.0);
    f.gm->setR1MinimizeEpsilon(0.01, 0.001);
    //f.gm->setMaxIterationCount(100);
    f.gm->showExitMessage(true);
    f.gm->calculate(x);
    delete f.gm;
}

Functional::Functional(double diffusivity, double conductivity, double convection, double lambda):
    LoadedHeatEquationIBVP(+diffusivity, conductivity, -convection),
    LoadedHeatEquationFBVP(-diffusivity, conductivity, +convection)
{
    this->lambda1 = lambda;

    const size_t time_size = _timeDimension.size();

    measurePoint = new SpacePoint[meausere_point_number];
    measurePoint[0] = SpacePoint(0.25, 0.25);
    measurePoint[1] = SpacePoint(0.25, 0.75);
    measurePoint[2] = SpacePoint(0.75, 0.75);
    measurePoint[3] = SpacePoint(0.75, 0.25);

    k = DoubleMatrix(heating_source_number, meausere_point_number,  -0.1);
    z = DoubleMatrix(heating_source_number, meausere_point_number, +10.0);

    uj_v = DoubleVector(meausere_point_number*time_size, 0.0);
    pi_v = DoubleVector(heating_source_number*time_size, 0.0);

    qi_v = DoubleVector(heating_source_number*time_size, 0.0);
    gj_v = DoubleVector(meausere_point_number*time_size, 0.0);
}

auto Functional::fx(const DoubleVector &x) const -> double
{
    const_cast<Functional*>(this)->functionCount++;

#ifdef OPTIMIZE_Q
    const_cast<Functional*>(this)->qv = x;
#endif

#ifdef OPTIMIZE_Y
    for (size_t i=0; i<heating_source_number; i++)
    {
        for (size_t j=0; j<meausere_point_number; j++)
        {
            const_cast<Functional*>(this)->k[i][j] = x[0*heating_source_number*meausere_point_number + i*meausere_point_number + j];
            const_cast<Functional*>(this)->z[i][j] = x[1*heating_source_number*meausere_point_number + i*meausere_point_number + j];
        }
    }
#endif

    LoadedHeatEquationIBVP::implicit_calculate_D2V1();
    double integralU = integral(U);
    return integralU;
}

auto Functional::integral(const DoubleMatrix &) const -> double
{
    const size_t N = static_cast<size_t> ( _spaceDimensionX.size()-1 );
    const size_t M = static_cast<size_t> ( _spaceDimensionY.size()-1 );
    const double hx = _spaceDimensionX.step();
    const double hy = _spaceDimensionY.step();

    double udiff = 0.0;
    double usum = 0.0;

    udiff = (U[0][0]-V[0][0]); usum += 0.25 * udiff * udiff;// * mu(0, 0);
    udiff = (U[0][N]-V[0][N]); usum += 0.25 * udiff * udiff;// * mu(N, 0);
    udiff = (U[M][0]-V[M][0]); usum += 0.25 * udiff * udiff;// * mu(0, M);
    udiff = (U[M][N]-V[M][N]); usum += 0.25 * udiff * udiff;// * mu(N, M);

    for (size_t n=1; n<=N-1; n++)
    {
        udiff = U[0][n]-V[0][n]; usum += 0.5 * udiff * udiff;// * mu(n, 0);
        udiff = U[M][n]-V[M][n]; usum += 0.5 * udiff * udiff;// * mu(n, M);
    }

    for (size_t m=1; m<=M-1; m++)
    {
        udiff = U[m][0]-V[m][0]; usum += 0.5 * udiff * udiff;// * mu(0, m);
        udiff = U[m][N]-V[m][N]; usum += 0.5 * udiff * udiff;// * mu(N, m);
    }

    for (unsigned int m=1; m<=M-1; m++)
    {
        for (unsigned int n=1; n<=N-1; n++)
        {
            udiff = U[m][n]-V[m][n]; usum += udiff * udiff;// * mu(n, m);
        }
    }


    class Integral : public RnFunction
    {
    public:
        virtual auto fx(const DoubleVector &x) const -> double { return 0.0; }
    };

    return usum*(hx*hy);
}

auto Functional::gradient(const DoubleVector &x, DoubleVector &g) const -> void
{
    const size_t time_size = _timeDimension.size();
    const double time_step = _timeDimension.step();

    g.resize(x.length());
    for (size_t n=0; n<g.length(); n++) g[n] = 0.0;

#ifdef OPTIMIZE_Q
    const_cast<Functional*>(this)->qv = x;
#endif

#ifdef OPTIMIZE_Y
    for (size_t i=0; i<heating_source_number; i++)
    {
        for (size_t j=0; j<meausere_point_number; j++)
        {
            const_cast<Functional*>(this)->k[i][j] = x[0*heating_source_number*meausere_point_number + i*meausere_point_number + j];
            const_cast<Functional*>(this)->z[i][j] = x[1*heating_source_number*meausere_point_number + i*meausere_point_number + j];
        }
    }
#endif

    LoadedHeatEquationIBVP::implicit_calculate_D2V1();
    LoadedHeatEquationFBVP::implicit_calculate_D2V1();

#ifdef OPTIMIZE_Q
    for (size_t i=0; i<heating_source_number; i++)
    {
        for (size_t ln=0; ln<time_size; ln++)
        {
            /*if (ln%100==0)*/ g[i*time_size+ln] = -pv[i*time_size+ln];
        }
    }
#endif

#ifdef OPTIMIZE_Y
    for (size_t i=0; i<heating_source_number; i++)
    {
        const size_t offset1 = i*time_size;
        for (size_t j=0; j<meausere_point_number; j++)
        {
            const size_t offset2 = j*time_size;

            for (size_t ln=0; ln<time_size; ln++)
            {
                double w = (ln==0 || ln == time_size-1) ? 0.5*time_step : time_step;
                if (optimizeK) g[0*heating_source_number*meausere_point_number + i*meausere_point_number + j] += -pi_v[offset1+ln] * (uj_v[offset2+ln]-z[i][j]) * w;
                if (optimizeZ) g[1*heating_source_number*meausere_point_number + i*meausere_point_number + j] += +pi_v[offset1+ln] * k[i][j] * w;
            }
        }
    }
#endif
}

auto Functional::project(DoubleVector &x, size_t index) -> void
{
#ifdef OPTIMIZE_Q
    if (x[index] <=  0.0) x[index] =  0.0;
    if (x[index] >= 12.0) x[index] = 12.0;
#endif
}

auto Functional::print(unsigned int iteration, const DoubleVector &x, const DoubleVector &g, double f, double alpha, GradientBasedMethod::MethodResult /*result*/) const -> void
{
    //if (f <= 0.1) { const_cast<Functional*>(this)->gm->setR1MinimizeEpsilon(0.100, 0.0100); }
    //if (fabs(f - lastFx) <= 0.10000) { const_cast<Functional*>(this)->gm->setR1MinimizeEpsilon(0.100, 0.0100); }
    //if (fabs(f - lastFx) <= 0.00100) { const_cast<Functional*>(this)->gm->setR1MinimizeEpsilon(0.010, 0.0010); }
    //if (fabs(f - lastFx) <= 0.00001) { const_cast<Functional*>(this)->gm->setR1MinimizeEpsilon(0.001, 0.0001); }

    const_cast<Functional*>(this)->lastFx = f;

    size_t time_size = static_cast<size_t>(_timeDimension.max());
    printf("I[%3d]: %10.6f | %10.6f %10.6f | %10.6f %10.6f | %10.6f | %4zu | %4zu | %4zu | %4zu | %10.6f %10.6f\n", iteration, f, U.min(), U.max(),
           gm->min_step, gm->min_epsilon, alpha, functionCount,
           gm->search_function_count, gm->golden_function_count, gm->total__function_count, x.min(), x.max());

#ifdef OPTIMIZE_Q
    IPrinter::printVector(x.mid(   0, time_size));
    IPrinter::printVector(g.mid(   0, time_size));
    IPrinter::printVector(x.mid(time_size+1, 2*time_size+1));
    IPrinter::printVector(g.mid(time_size+1, 2*time_size+1));
#endif
#ifdef OPTIMIZE_Y
    IPrinter::printVector(x, "x:\t", x.length());
    IPrinter::printVector(g, "g:\t", g.length());
#endif
    const_cast<Functional*>(this)->functionCount = 0;
    const_cast<Functional*>(this)->optimizeK = iteration%2==0;
    const_cast<Functional*>(this)->optimizeZ = iteration%2==1;

    if (iteration!=0) const_cast<Functional*>(this)->gm->setR1MinimizeEpsilon(alpha*0.5, alpha*0.1);

    if (f<=1.0)
    {
//        std::cout << "---" << std::endl;
#ifdef OPTIMIZE_Q
        IPrinter::printVector(x.mid(   0, time_size), nullptr, x.mid(   0, time_size).length());
        IPrinter::printVector(x.mid(time_size+1, 2*time_size+1), nullptr, x.mid(time_size+1, 2*time_size+1).length());
#endif
#ifdef OPTIMIZE_Y
//        const size_t offset = heating_source_number*meausere_point_number;
//        const size_t time_size1 = static_cast<size_t>(_timeDimension.size());
//        IPrinter::printVector(qi_v.mid(0*time_size1, 1*time_size1-1), nullptr, time_size1);
//        IPrinter::printVector(qi_v.mid(1*time_size1, 2*time_size1-1), nullptr, time_size1);
#endif
//        std::cout << "---" << std::endl;
    }


    const_cast<Functional*>(this)->drawImages = 1;
#ifdef OPTIMIZE_Q
    const_cast<Functional*>(this)->qv = x;
#endif
#ifdef OPTIMIZE_Y
    for (size_t i=0; i<heating_source_number; i++)
    {
        for (size_t j=0; j<meausere_point_number; j++)
        {
            const_cast<Functional*>(this)->k[i][j] = x[0*heating_source_number*meausere_point_number + i*meausere_point_number + j];
            const_cast<Functional*>(this)->z[i][j] = x[1*heating_source_number*meausere_point_number + i*meausere_point_number + j];
        }
    }
#endif
//    LoadedHeatEquationIBVP::implicit_calculate_D2V1();
//    const_cast<Functional*>(this)->drawImages = 0;
//    std::string path = "E:\\project\\hvugar\\num_methods\\trunk\\optimal\\bin\\data\\problem3P\\f\\png\\";
//    system(std::string("mkdir ").append(path).append(std::to_string(iteration)).append(" >nul").data());
//    system(std::string("move  ").append(path).append("*.png ").append(path).append(std::to_string(iteration)).append("\\ >nul").data());
}

/*********************************************************************************************************************************************/

LoadedHeatEquationIBVP::LoadedHeatEquationIBVP(double diffusivity, double conductivity, double convection)
{
    setThermalDiffusivity(diffusivity);
    setThermalConductivity(conductivity);
    setThermalConvection(convection);
}

LoadedHeatEquationIBVP::LoadedHeatEquationIBVP(const LoadedHeatEquationIBVP &lhe) : IHeatEquationIBVP(lhe) {}

LoadedHeatEquationIBVP::~LoadedHeatEquationIBVP() {}

LoadedHeatEquationIBVP& LoadedHeatEquationIBVP::operator =(const LoadedHeatEquationIBVP &) { throw std::exception(); }

auto LoadedHeatEquationIBVP::initial(const SpaceNodePDE &/*sn*/, InitialCondition /*ic*/) const -> double { return initial_temperature; }

auto LoadedHeatEquationIBVP::boundary(const SpaceNodePDE &/*sn*/, const TimeNodePDE &/*tn*/, BoundaryConditionPDE &bc) const -> double
{
    //bc = BoundaryConditionPDE::Dirichlet(); return 0.0;
    //bc = BoundaryConditionPDE::Neumann(); return 0.0;
    bc = BoundaryConditionPDE::Robin(lambda1, +1.0); return lambda1 * envrmnt_temperature;
}

auto LoadedHeatEquationIBVP::f(const SpaceNodePDE &sn, const TimeNodePDE &tn) const -> double
{
    const double dimX_step = spaceDimensionX().step();
    const double dimY_step = spaceDimensionY().step();

    double sum = 0.0;
#ifdef OPTIMIZE_Y
    size_t time_size = timeDimension().size();
    for (size_t i=0; i<heating_source_number; i++)
    {
        const SpacePoint &si = s(tn, i);
        const double w = DeltaFunction::gaussian(sn, si, SpacePoint(dimX_step, dimY_step));
        if (w > 0.0) { sum += qi_v[i*time_size + tn.i] * w; }
    }
#endif

#ifdef OPTIMIZE_Q
    for (size_t i=0; i<heating_source_number; i++)
    {
        const SpacePoint &zi = s(tn, i);
        const double w = DeltaFunction::gaussian(sn, zi, SpacePoint(dimX_step, dimY_step));
        if (w > 0.0) { sum += q(tn, i) * w; }
    }
#endif

    return sum - thermalConvection() * envrmnt_temperature;
}

auto LoadedHeatEquationIBVP::layerInfo(const DoubleMatrix &u, const TimeNodePDE &tn) const -> void
{
    LoadedHeatEquationIBVP* lhe = const_cast<LoadedHeatEquationIBVP*>(this);

#ifdef OPTIMIZE_Y
    size_t time__min = static_cast<size_t>(timeDimension().min());
    size_t time__max = static_cast<size_t>(timeDimension().max());
    size_t time_size = timeDimension().size();
    for (size_t j=0; j<meausere_point_number; j++)
    {
        const SpacePoint &mp = measurePoint[j];
        lhe->Shared::uj_v[j*time_size+tn.i] = DeltaFunction::lumpedPointG(u, mp, _spaceDimensionX, _spaceDimensionY, 1, 4);
    }

    for (size_t i=0; i<heating_source_number; i++)
    {
        double qi = 0.0;
        size_t index = i*time_size + tn.i;
        for (size_t j=0; j<meausere_point_number; j++) { qi += k[i][j]*(uj_v[j*time_size+tn.i] - z[i][j]); }
        if (tn.i==time__min) lhe->qi_v[index] = qi;
        if (tn.i!=time__max) lhe->qi_v[index+1] = qi;
        if (tn.i==time__max) lhe->qi_v[index] = qi;
    }
#endif

    saveImage(u, tn);
    if (static_cast<int>(tn.i) == timeDimension().max()) { lhe->Shared::U = u; }
}

auto LoadedHeatEquationIBVP::saveImage(const DoubleMatrix &u, const TimeNodePDE &tn) const -> void
{
    if (drawImages != 0)
    {
        //printf(">>> %6d %14.6f %14.6f\n", tn.i, u.min(), u.max());

        QString filename = QString("data/problem3P/f/png/%1.png").arg(tn.i, 8, 10, QChar('0'));
        QPixmap pixmap;
        visualizeMatrixHeat(u, u.min(), u.max(), pixmap, 101, 101);
        pixmap.save(filename);
    }
}

auto LoadedHeatEquationIBVP::timeDimension() const -> Dimension { return Shared::_timeDimension; }

auto LoadedHeatEquationIBVP::spaceDimensionX() const -> Dimension { return Shared::_spaceDimensionX; }

auto LoadedHeatEquationIBVP::spaceDimensionY() const -> Dimension { return Shared::_spaceDimensionY; }

auto LoadedHeatEquationIBVP::spaceDimensionZ() const -> Dimension { return Shared::_spaceDimensionZ; }

/*********************************************************************************************************************************************/

LoadedHeatEquationFBVP::LoadedHeatEquationFBVP(double diffusivity, double conductivity, double convection)
{
    setThermalDiffusivity(diffusivity);
    setThermalConductivity(conductivity);
    setThermalConvection(convection);
}

LoadedHeatEquationFBVP::LoadedHeatEquationFBVP(const LoadedHeatEquationFBVP &) : IHeatEquationFBVP() { }

LoadedHeatEquationFBVP::~LoadedHeatEquationFBVP() {}

LoadedHeatEquationFBVP& LoadedHeatEquationFBVP::operator =(const LoadedHeatEquationFBVP &) { return *this; }

auto LoadedHeatEquationFBVP::final(const SpaceNodePDE &sn, FinalCondition /*ic*/) const -> double
{
    size_t j = static_cast<size_t>(sn.j), i = static_cast<size_t>(sn.i);
    return -2.0 * ( U[j][i] - V[j][i] );
}

auto LoadedHeatEquationFBVP::boundary(const SpaceNodePDE &/*sn*/, const TimeNodePDE &/*tn*/, BoundaryConditionPDE &bc) const -> double
{
    //bc = BoundaryConditionPDE::Dirichlet(); return 0.0;
    //bc = BoundaryConditionPDE::Neumann(); return 0.0;
    bc = BoundaryConditionPDE::Robin(lambda1, +1.0); return 0.0;
}

auto LoadedHeatEquationFBVP::f(const SpaceNodePDE &sn, const TimeNodePDE &tn) const -> double
{
    const double dimX_step = spaceDimensionX().step();
    const double dimY_step = spaceDimensionY().step();

    double sum = 0.0;
#ifdef OPTIMIZE_Y
    size_t time_size = timeDimension().size();
    for (size_t j=0; j<meausere_point_number; j++)
    {
        const SpacePoint &mp = measurePoint[j];
        const double w = DeltaFunction::gaussian(sn, mp, SpacePoint(dimX_step, dimY_step));
        if (w > 0.0) { sum -= gj_v[j*time_size+tn.i] * w; }
    }
#endif

    return sum;
}

auto LoadedHeatEquationFBVP::layerInfo(const DoubleMatrix &p, const TimeNodePDE &tn) const -> void
{
    LoadedHeatEquationFBVP* lhe = const_cast<LoadedHeatEquationFBVP*>(this);

#ifdef OPTIMIZE_Y
    size_t time__min = static_cast<size_t>(timeDimension().min());
    size_t time__max = static_cast<size_t>(timeDimension().max());
    size_t time_size = timeDimension().size();
    for (size_t i=0; i<heating_source_number; i++)
    {
        const SpacePoint &si = s(tn, i);
        lhe->Shared::pi_v[i*time_size+tn.i] = DeltaFunction::lumpedPointG(p, si, _spaceDimensionX, _spaceDimensionY, 1, 4);
    }

    for (size_t j=0; j<meausere_point_number; j++)
    {
        double gj = 0.0;
        size_t index = j*time_size + tn.i;
        for (size_t i=0; i<heating_source_number; i++) { gj += k[i][j]*pi_v[i*time_size+tn.i]; }
        if (tn.i==time__max) lhe->gj_v[index] = gj;
        if (tn.i!=time__min) lhe->gj_v[index-1] = gj;
        if (tn.i==time__min) lhe->gj_v[index] = gj;
    }
#endif

#ifdef OPTIMIZE_Q
    size_t time_size = timeDimension().size();
    for (size_t i=0; i<heating_source_number; i++)
    {
        const SpacePoint &si = s(tn, i);
        lhe->Shared::pi_v[i*time_size+tn.i] = DeltaFunction::lumpedPointG(p, si, _spaceDimensionX, _spaceDimensionY, 1, 4);
    }
#endif

    //saveImage(p, tn);
}

auto LoadedHeatEquationFBVP::saveImage(const DoubleMatrix &p, const TimeNodePDE &tn) const -> void
{
    if (drawImages != 0)
    {
        QString filename = QString("data/problem3P/b/png/%1.png").arg(tn.i, 8, 10, QChar('0'));
        QPixmap pixmap;
        visualizeMatrixHeat(p, p.min(), p.max(), pixmap, 101, 101);
        pixmap.save(filename);
    }

}

auto LoadedHeatEquationFBVP::timeDimension() const -> Dimension { return Shared::_timeDimension; }

auto LoadedHeatEquationFBVP::spaceDimensionX() const -> Dimension { return Shared::_spaceDimensionX; }

auto LoadedHeatEquationFBVP::spaceDimensionY() const -> Dimension { return Shared::_spaceDimensionY; }

auto LoadedHeatEquationFBVP::spaceDimensionZ() const -> Dimension { return Shared::_spaceDimensionZ; }

/*********************************************************************************************************************************************/

auto Shared::q(const TimeNodePDE &tn, size_t i) const -> double
{
    size_t time_size = _timeDimension.size();
    return qi_v[i*time_size + tn.i];
    //    return 0.05*tn.t;
}

auto Shared::s(const TimeNodePDE &tn, size_t i) const -> SpacePoint
{
    SpacePoint sp;
    const double t = tn.t;
    const double v = 2.0*M_PI/**t*/;
    switch (i) {
    case 0: {
        sp.x = /*0.2*/0.4*sin(v*t) + 0.5;
        sp.y = /*0.2*/0.4*cos(v*t) + 0.5;
    } break;
    case 1: {
        sp.x = -0.2*sin(v*t) + 0.5;
        sp.y = -0.2*cos(v*t) + 0.5;
    } break;
    }

    return sp;
}
